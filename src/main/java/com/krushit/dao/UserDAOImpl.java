package com.krushit.dao;

import com.krushit.entity.User;
import com.krushit.utils.DBConnection;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;

public class UserDAOImpl implements IUserDAO {

    private final String INSERT_USER_DATA = "INSERT INTO users (role_id , first_name, last_name, phone_no, email_id, password, display_id) VALUES (?, ?, ?, ?, ?, ?, ?)";
    private final String CREATE_DISPLAY_ID = "UPDATE users SET display_id = ? WHERE user_id = ?";

    @Override
    public boolean registerUser(User user) {
        try (Connection connection = DBConnection.getConnection()) {
            connection.setAutoCommit(false);

            int userId = -1;

            //PreparedStatement object that has the capability to retrieve auto-generated keys
            try (PreparedStatement insertStmt = connection.prepareStatement(INSERT_USER_DATA, PreparedStatement.RETURN_GENERATED_KEYS)) {
                insertStmt.setInt(1, user.getRoleId());
                insertStmt.setString(2, user.getFirstName());
                insertStmt.setString(3, user.getLastName());
                insertStmt.setString(4, user.getPhoneNo());
                insertStmt.setString(5, user.getEmailId());
                insertStmt.setString(6, user.getPassword());
                // for temporary store
                insertStmt.setString(7, String.valueOf(System.currentTimeMillis() % 10000));

                int count = insertStmt.executeUpdate();
                if (count > 0) {
                    //insertStmt.getGeneratedKeys(): Retrieves any auto-generated keys created as a result.
                    try (ResultSet autoGeneratedKey = insertStmt.getGeneratedKeys()) {
                        if (autoGeneratedKey.next()) {
                            userId = autoGeneratedKey.getInt(1);
                        }
                    }
                }
            }

            if (userId > 0) {
                String timestampPart = String.valueOf(System.currentTimeMillis() % 1000);
                String userIdPart = String.format("%04d", userId % 10000);
                String displayId = "US" + userIdPart + "R" + timestampPart;
                System.out.println("Display ID :: " + displayId);

                try (PreparedStatement updateStmt = connection.prepareStatement(CREATE_DISPLAY_ID)) {
                    updateStmt.setString(1, displayId);
                    updateStmt.setInt(2, userId);
                    updateStmt.executeUpdate();
                }

                connection.commit();
                return true;
            }

            connection.rollback();
        } catch (SQLException e) {
            e.printStackTrace();
        } catch (ClassNotFoundException e) {
            e.printStackTrace();
        }
        return false;
    }
}

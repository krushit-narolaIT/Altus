package com.krushit.dao;

import com.krushit.common.Message;
import com.krushit.entity.Driver;
import com.krushit.entity.Role;
import com.krushit.entity.User;
import com.krushit.utils.DBConnection;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;

public class DriverDAOImpl implements IDriverDAO {
    private final String INSERT_DRIVER_DATA = "INSERT INTO users (role_id, first_name, last_name, phone_no, email_id, password, display_id) VALUES (?, ?, ?, ?, ?, ?, ?)";
    private final String CREATE_DISPLAY_ID = "UPDATE users SET display_id = ? WHERE user_id = ?";
    private final String DRIVER_LOGIN = "SELECT * FROM users WHERE email_id = ? AND password = ?";
    private final String GET_ROLE = "SELECT role FROM roles WHERE role_id = ?";
    private final String CHECK_DRIVER_EXISTENCE = "SELECT COUNT(*) FROM users WHERE email_id = ?";

    private final Connection connection = DBConnection.getConnection();

    @Override
    public String registerDriver(User driver) throws SQLException {
        try {
            if (isDriverExist(driver.getEmailId())) return Message.DRIVER_ALREADY_EXIST;
            connection.setAutoCommit(false);

            RoleDAOImpl roleDAO = new RoleDAOImpl();
            int role_id = roleDAO.getRoleID("Driver");
            int driverId = -1;

            try (PreparedStatement insertStmt = connection.prepareStatement(INSERT_DRIVER_DATA, PreparedStatement.RETURN_GENERATED_KEYS)) {
                insertStmt.setInt(1, role_id);
                insertStmt.setString(2, driver.getFirstName());
                insertStmt.setString(3, driver.getLastName());
                insertStmt.setString(4, driver.getPhoneNo());
                insertStmt.setString(5, driver.getEmailId());
                insertStmt.setString(6, driver.getPassword());
                insertStmt.setString(7, String.valueOf(System.currentTimeMillis() % 10000));

                int count = insertStmt.executeUpdate();
                if (count > 0) {
                    try (ResultSet autoGeneratedKey = insertStmt.getGeneratedKeys()) {
                        if (autoGeneratedKey.next()) {
                            driverId = autoGeneratedKey.getInt(1);
                        }
                    }
                }
            }

            if (driverId > 0) {
                String timestampPart = String.valueOf(System.currentTimeMillis() % 1000);
                String driverIdPart = String.format("%04d", driverId % 10000);
                String displayId = "DR" + driverIdPart + "V" + timestampPart;
                System.out.println("Display ID :: " + displayId);

                try (PreparedStatement updateStmt = connection.prepareStatement(CREATE_DISPLAY_ID)) {
                    updateStmt.setString(1, displayId);
                    updateStmt.setInt(2, driverId);
                    updateStmt.executeUpdate();
                }

                connection.commit();
                connection.setAutoCommit(true);
                return Message.REGISTRATION_SUCCESSFUL;
            }
            connection.rollback();
        } catch (SQLException e) {
            e.printStackTrace();
        } finally {
            connection.setAutoCommit(true);
        }
        return Message.INTERNAL_SERVER_ERROR;
    }

    @Override
    public Driver driverLogin(String email_id, String password) {
        Driver driver = null;

        try (PreparedStatement statement = connection.prepareStatement(DRIVER_LOGIN)) {
            statement.setString(1, email_id);
            statement.setString(2, password);

            ResultSet resultSet = statement.executeQuery();

            if (resultSet.next()) {
                driver = new Driver();
                driver.setDriverId(resultSet.getInt("driver_id"));

                int roleId = resultSet.getInt("role_id");
                String roleName = getRole(roleId);
                Role role = new Role(roleId, roleName);
                driver.setRole(role);

                driver.setFirstName(resultSet.getString("first_name"));
                driver.setLastName(resultSet.getString("last_name"));
                driver.setPhoneNo(resultSet.getString("phone_no"));
                driver.setEmailId(resultSet.getString("email_id"));
                driver.setDisplayId(resultSet.getString("display_id"));
                driver.setCreatedAt(resultSet.getTimestamp("created_at"));
                driver.setUpdatedAt(resultSet.getTimestamp("updated_at"));
                driver.setCreatedBy(resultSet.getString("created_by"));
                driver.setUpdatedBy(resultSet.getString("updated_by"));
            }
            resultSet.close();

        } catch (SQLException e) {
            e.printStackTrace();
        }
        return driver;
    }

    @Override
    public String getRole(int role_id) {
        try (PreparedStatement statement = connection.prepareStatement(GET_ROLE)) {
            statement.setInt(1, role_id);

            ResultSet resultSet = statement.executeQuery();

            if (resultSet.next()) {
                return resultSet.getString("role");
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
        return null;
    }

    @Override
    public boolean isDriverExist(String emailID) throws SQLException {
        try (PreparedStatement checkStmt = connection.prepareStatement(CHECK_DRIVER_EXISTENCE)) {
            checkStmt.setString(1, emailID);
            ResultSet resultSet = checkStmt.executeQuery();

            if (resultSet.next() && resultSet.getInt(1) > 0) {
                return true;
            }
        }
        return false;
    }
}
